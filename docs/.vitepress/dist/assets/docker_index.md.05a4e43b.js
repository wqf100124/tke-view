import{_ as e,o,c as r,Q as a}from"./chunks/framework.26d96b30.js";const p=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"docker/index.md","filePath":"docker/index.md"}'),t={name:"docker/index.md"},c=a('<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><p>官方网站: <a href="https://www.docker.com" target="_blank" rel="noreferrer">https://www.docker.com</a></p><h2 id="docker是什么" tabindex="-1">Docker是什么？ <a class="header-anchor" href="#docker是什么" aria-label="Permalink to &quot;Docker是什么？&quot;">​</a></h2><blockquote><p>Docker是一个用于开发、打包和运行应用程序的开放平台。它可以将应用程序与基础架构分离。docker的虚拟容器，能够将你的开发环境、配置文件、代码等一并打包成镜像，然后去快速的发布、测试和部署。利用docker，可以显著减少从代码开发到上线运行之间的时间。</p></blockquote><p>以View系统为例，它的运行环境包含了Apache、PHP、Mysql、Memcached、MongoDB、Redis、Rabbitmq等服务。Docker可以将这些服务和代码打包成为一个或多个镜像，然后部署到开发或生产环境中。</p><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><ul><li>镜像(Image)<br> 类似于虚拟机中的镜像，是一个包含有文件系统的面向Docker引擎的<strong>只读模板</strong>，镜像为应用程序提供运行环境。例如Ubuntu20.04就是一个包含Ubuntu操作系统环境的模板，在该镜像上装上Apache软件，就可以称为Apache镜像。</li><li>容器(Container)<br> 类似于一个轻量级的沙盒，可以将其看作一个极简的Linux系统环境（包括root权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是相互隔离的，互不影响。注意：镜像本身是只读的，容器从镜像启动时，Docker在镜像的上层创建一个可写层，镜像本身不变。</li><li>仓库(Repository)<br> 类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方，每个镜像利用tag进行区分，比如Ubuntu仓库存放有多个版本（20.04、16.04等）的Ubuntu镜像。</li></ul>',7),n=[c];function i(d,l,s,k,h,_){return o(),r("div",null,n)}const b=e(t,[["render",i]]);export{p as __pageData,b as default};
